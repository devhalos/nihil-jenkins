name: pipeline

on: push

jobs:

  audit:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - name: 'npm: audit'
        run: npm audit

  lint-infra:
    needs: audit
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - name: 'aws: configure'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.CICD_PIPELINE_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: 'tf: setup'
        uses: hashicorp/setup-terraform@v2

      - name: 'tf: format'
        run: terraform fmt -check -recursive

  build-jenkins-app-infra-dev:
    needs: lint-infra
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: jenkins-app/terraform

    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - name: 'aws: configure'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.CICD_PIPELINE_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: 'tf: setup'
        uses: hashicorp/setup-terraform@v2

      - name: 'tf: init'
        run: terraform init

      - name: 'tf: workspace dev'
        run: terraform workspace select dev || terraform workspace new dev

      - name: 'tf: plan'
        run: terraform plan -out local.tfplan

      - name: 'upload artifact: terraform plan output'
        uses: actions/upload-artifact@v2
        with:
          name: jenkins-app-terraform-plan-artifact
          path: jenkins-app/terraform/local.tfplan

  deploy-jenkins-app-infra-dev:
    if: contains(github.ref, 'refs/heads/main') || contains(github.ref, 'refs/tags')
    needs: build-jenkins-app-infra-dev
    environment: dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: jenkins-app/terraform

    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - name: 'aws: configure'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.CICD_PIPELINE_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: 'tf: setup'
        uses: hashicorp/setup-terraform@v2

      - name: 'tf: init'
        run: terraform init     

      - name: 'tf: workspace dev'
        run: terraform workspace select dev || terraform workspace new dev

      - name: 'download artifact: terraform plan output'
        uses: actions/download-artifact@v2
        with:
          name: jenkins-app-terraform-plan-artifact
          path: jenkins-app/terraform

      - name: 'tf: apply'
        run: terraform apply local.tfplan

  build-publish-jenkins-app-dev:
    if: contains(github.ref, 'refs/heads/main') || contains(github.ref, 'refs/tags')
    needs: deploy-jenkins-app-infra-dev
    environment: dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: jenkins-app/src

    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - name: 'aws: configure'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.CICD_PIPELINE_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: 'ecr: login'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 'docker: build-publish'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: nihil-dev-jenkins-app
          IMAGE_TAG: dev
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  build-jenkins-service-infra-dev:
    needs: build-publish-jenkins-app-dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: jenkins-service/terraform

    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - name: 'aws: configure'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.CICD_PIPELINE_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: 'tf: setup'
        uses: hashicorp/setup-terraform@v2

      - name: 'tf: init'
        run: terraform init

      - name: 'tf: workspace dev'
        run: terraform workspace select dev || terraform workspace new dev

      - name: 'tf: plan'
        run: terraform plan -out local.tfplan
        env:
          TF_VAR_aws_account: ${{ secrets.AWS_ACCOUNT }}
          TF_VAR_admin_username: ${{ secrets.JENKINS_ADMIN_USERNAME }}
          TF_VAR_admin_password: ${{ secrets.JENKINS_ADMIN_PASSWORD }}
          TF_VAR_admin_email: ${{ secrets.JENKINS_ADMIN_EMAIL }}
          TF_VAR_github_token: ${{ secrets.JENKINS_GITHUB_TOKEN }}
          TF_VAR_github_username: ${{ secrets.JENKINS_GITHUB_USERNAME }}

      - name: 'upload artifact: terraform plan output'
        uses: actions/upload-artifact@v2
        with:
          name: jenkins-service-terraform-plan-artifact
          path: jenkins-service/terraform/local.tfplan

  deploy-jenkins-service-infra-dev:
    if: contains(github.ref, 'refs/heads/main') || contains(github.ref, 'refs/tags')
    needs: build-jenkins-service-infra-dev
    environment: dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: jenkins-service/terraform

    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - name: 'aws: configure'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.CICD_PIPELINE_ROLE_ARN }}
          aws-region: ap-southeast-1

      - name: 'tf: setup'
        uses: hashicorp/setup-terraform@v2

      - name: 'tf: init'
        run: terraform init     

      - name: 'tf: workspace dev'
        run: terraform workspace select dev || terraform workspace new dev

      - name: 'download artifact: terraform plan output'
        uses: actions/download-artifact@v2
        with:
          name: jenkins-service-terraform-plan-artifact
          path: jenkins-service/terraform

      - name: 'tf: apply'
        run: terraform apply local.tfplan

  create-release:
    if: contains(github.ref, 'refs/heads/main')
    needs: build-publish-jenkins-app-dev

    name: 'create-release'
    runs-on: ubuntu-latest 

    steps:
      - name: 'checkout'
        uses: actions/checkout@v3

      - uses: google-github-actions/release-please-action@v3.1.2
        with:
          token: ${{ secrets.CICD_PIPELINE_GITHUB_TOKEN }}
          release-type: node